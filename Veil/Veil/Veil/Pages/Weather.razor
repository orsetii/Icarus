@page "/weather"
@using Newtonsoft.Json
@using ThirdPartyApis
@inject IJSRuntime JS

<PageTitle>Veil | Weather</PageTitle>



        @if (weatherResults is not null)
        {

        <WeatherChart SeriesElement1Label="Tempurature °C" YAxisLabel="Tempurature °C" XAxisLabel="Time (HH)" SeriesElement1="weatherResults.hourly.temperature_2m.Cast<object>().ToList()"></WeatherChart>
        }



        <MudGrid>
    <MudItem xs="12">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">xs=12</MudPaper>
    </MudItem>
    <MudItem xs="6">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">xs=6</MudPaper>
    </MudItem>
    <MudItem xs="6">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">xs=6</MudPaper>
    </MudItem>
    <MudItem xs="3">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">xs=3</MudPaper>
    </MudItem>
    <MudItem xs="3">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">xs=3</MudPaper>
    </MudItem>
    <MudItem xs="3">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">xs=3</MudPaper>
    </MudItem>
    <MudItem xs="12">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8 px-8">

            <WeatherChart></WeatherChart>
        </MudPaper>
    </MudItem>
</MudGrid>



@code {

    public double Latitude { get; set; } = 0.0;
    public double Longitude { get; set; } = 0.0;

    public ForecastResult? weatherResults { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await GetWeather();
    }

    async Task GetWeather()
    {
        var forecast = await Services.Weather.GetTodaysWeather(Latitude, Longitude);
        weatherResults = forecast;
    }

    async void GetWeather(double lat, double longi)
    {
        var forecast = await Services.Weather.GetTodaysWeather(lat, longi);
        weatherResults = forecast;
    }
}

