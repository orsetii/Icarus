@page "/weather"
@using Microsoft.EntityFrameworkCore
@using Newtonsoft.Json
@using ThirdPartyApis
@using Veil.Data.Weather
@inject IJSRuntime JS
@inject GlobalStateService gss
@inject ISnackbar Snackbar
@inject IDbContextFactory<VeilContext> dbFactory

<PageTitle>Veil | Weather</PageTitle>




@if (gss.IsTransmissionEnabled) {

        @if (weatherService != null && weatherService.ForecastResult != null)
        {
        }

}

        <MudGrid>
    <MudItem xs="6">
        <MudPaper Height="45vh" Class="d-flex align-center justify-center mud-width-full py-8">
            @if (showMap)
            {
            <Map RequestedLatitude="10.0" RequestedLongitude="15.0"  HeightPercentage="110"/> 
            } else {
                <MudButton OnClick="ToggleMap" Color="Color.Primary" Variant="Variant.Filled">Show Weather Location</MudButton>
            }
        </MudPaper>
    </MudItem>

    <MudItem xs="6">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">

        </MudPaper>
    </MudItem>
</MudGrid>


@code {
    public double Latitude { get; set; }
    public double Longitude { get; set; }
    public WeatherService weatherService { get; set; }
    public bool showMap { get; set; } = false;




    protected override async Task OnParametersSetAsync()
    {
        if(gss.IsTransmissionEnabled) {

        }
        else {
            Snackbar.Add("Transmission is disabled. Please re-enable to retreive updated weather stats. Now displaying most recent weather for your location, retreieved at TODO time.", Severity.Error);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if(!firstRender) {
            if(gss.IsTransmissionEnabled)
            {
            }
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public void ToggleMap()
    {
            showMap = !showMap;
    }


    public ForecastResult GetMostRecentForecast(VeilContext ctx)
    {

            var mostRecentForecast = ctx.WeatherForecasts.OrderByDescending(x => x.dt_retreived).First();

            return mostRecentForecast;
    }
}

