@using Allegiance.Blazor.Highcharts.Charts
@using Allegiance.Blazor.Highcharts.Options

@inject IChartService chartService
@inject IJSRuntime jsRuntime
@implements IDisposable

<div id="basicLine"></div>
@code {

    [Parameter]
    public List<Object> SeriesElement1 { get; set; }
    [Parameter]
    public List<Object>? SeriesElement2 { get; set; }
    [Parameter]
    public List<Object>? SeriesElement3 { get; set; }
    [Parameter]
    public List<Object>? SeriesElement4 { get; set; }
    [Parameter]
    public List<Object>? SeriesElement5 { get; set; }

    [Parameter]
    public string? Title { get; set; } = String.Empty;

    [Parameter]
    public string? Subtitle { get; set; } = String.Empty;


    [Parameter]
    public string? YAxisLabel { get; set; } = String.Empty;

    [Parameter]
    public string? XAxisLabel { get; set; } = String.Empty;


    [Parameter]
    public string? SeriesElement1Label { get; set; } = String.Empty;
    [Parameter]
    public string? SeriesElement2Label { get; set; } = String.Empty;
    [Parameter]
    public string? SeriesElement3Label { get; set; } = String.Empty;
    [Parameter]
    public string? SeriesElement4Label { get; set; } = String.Empty;
    [Parameter]
    public string? SeriesElement5Label { get; set; } = String.Empty;

    ChartObject? BasicLineGraph = null;

    protected override void OnAfterRender(bool firstRender)
    {

        var sList = new List<SeriesElement>();
        sList.Add(new SeriesElement(SeriesElement1Label, SeriesElement1));
        if(SeriesElement2 is not null && SeriesElement2Label is not null)
        {

            sList.Add(new SeriesElement(SeriesElement2Label, SeriesElement2));
        }
        if(SeriesElement3 is not null && SeriesElement3Label is not null)
        {

            sList.Add(new SeriesElement(SeriesElement3Label, SeriesElement3));
        }
        if(SeriesElement4 is not null && SeriesElement4Label is not null)
        {

            sList.Add(new SeriesElement(SeriesElement4Label, SeriesElement4));
        }
        if(SeriesElement5 is not null && SeriesElement5Label is not null)
        {

            sList.Add(new SeriesElement(SeriesElement5Label, SeriesElement5));
        }


        BasicLineGraph = new ChartObject()
            {
                Series = sList,
                Title = new Title(Title),
                Subtitle = new Title(Subtitle),
                YAxis = new YAxis(
                      new Title(YAxisLabel)
                      ),
                XAxis = new XAxis(new Accessibility(XAxisLabel))
            };

        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            chartService.RenderChart("basicLine", BasicLineGraph.Generate());
        }
    }


    public void Dispose()
    {
        if(BasicLineGraph is not null)
        {
            BasicLineGraph.DisposeChart(jsRuntime, "basicLine");
        }
    }

    private bool isVisible;

    public void ToggleOverlay(bool value)
    {
        isVisible = value;
    }
}